// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SzkolenieTechniczneCinemaStorage;

#nullable disable

namespace SzkolenieTechniczneCinemaStorage.Migrations
{
    [DbContext(typeof(CinemaTicketDbContext))]
    partial class CinemaTicketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActiveTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("MovieCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieCategoryId");

                    b.ToTable("Movies", "Cinema");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.MovieCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCategories", "Cinema");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Seance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<long?>("SeanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeanceId");

                    b.ToTable("Seances", "Cinema");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar(28)");

                    b.Property<long>("SeanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SeanceId");

                    b.ToTable("Tickets", "Cinema");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Movie", b =>
                {
                    b.HasOne("SzkolenieTechniczneCinemaStorage.Entities.MovieCategory", "MovieCategory")
                        .WithMany()
                        .HasForeignKey("MovieCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieCategory");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.MovieCategory", b =>
                {
                    b.HasOne("SzkolenieTechniczneCinemaStorage.Entities.Movie", null)
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Seance", b =>
                {
                    b.HasOne("SzkolenieTechniczneCinemaStorage.Entities.Movie", "Movie")
                        .WithMany("Seances")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SzkolenieTechniczneCinemaStorage.Entities.Seance", null)
                        .WithMany("Seances")
                        .HasForeignKey("SeanceId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Ticket", b =>
                {
                    b.HasOne("SzkolenieTechniczneCinemaStorage.Entities.Seance", "Seance")
                        .WithMany("Tickets")
                        .HasForeignKey("SeanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seance");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Movie", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("Seances");
                });

            modelBuilder.Entity("SzkolenieTechniczneCinemaStorage.Entities.Seance", b =>
                {
                    b.Navigation("Seances");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
